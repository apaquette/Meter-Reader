// <auto-generated />
using System;
using EnergyInsightHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnergyInsightHub.Migrations
{
    [DbContext(typeof(EnergyHubContext))]
    partial class EnergyHubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("EnergyInsightHub.Models.Meter", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("EnergyInsightHub.Models.Microcontroller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MicroControllers");
                });

            modelBuilder.Entity("EnergyInsightHub.Models.MicrocontrollerAssignment", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControllerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TheMeterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("TheMeterId");

                    b.ToTable("MicrocontrollerAssignment");
                });

            modelBuilder.Entity("EnergyInsightHub.Models.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnergyMeterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MicrocontrollerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnergyMeterId");

                    b.HasIndex("MicrocontrollerId");

                    b.ToTable("Reading");
                });

            modelBuilder.Entity("EnergyInsightHub.Models.Meter", b =>
                {
                    b.HasOne("EnergyInsightHub.Models.Microcontroller", "Controller")
                        .WithOne("CurrentMeter")
                        .HasForeignKey("EnergyInsightHub.Models.Meter", "Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("EnergyInsightHub.Models.MicrocontrollerAssignment", b =>
                {
                    b.HasOne("EnergyInsightHub.Models.Microcontroller", "Controller")
                        .WithMany("Assignments")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyInsightHub.Models.Meter", "TheMeter")
                        .WithMany()
                        .HasForeignKey("TheMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");

                    b.Navigation("TheMeter");
                });

            modelBuilder.Entity("EnergyInsightHub.Models.Reading", b =>
                {
                    b.HasOne("EnergyInsightHub.Models.Meter", "EnergyMeter")
                        .WithMany()
                        .HasForeignKey("EnergyMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyInsightHub.Models.Microcontroller", "Microcontroller")
                        .WithMany("Readings")
                        .HasForeignKey("MicrocontrollerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnergyMeter");

                    b.Navigation("Microcontroller");
                });

            modelBuilder.Entity("EnergyInsightHub.Models.Microcontroller", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CurrentMeter");

                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
