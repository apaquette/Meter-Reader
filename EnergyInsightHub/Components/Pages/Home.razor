@using EnergyInsightHub.Data
@using EnergyInsightHub.Models
@using EnergyInsightHub.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.SignalR.Client

@page "/"
@rendermode InteractiveServer

@inject IDbContextFactory<EnergyHubContext> EnergyHubContextFactory
@inject NavigationManager Navigation
@inject DashboardUpdater DashboardUpdater

<PageTitle>Dashboard</PageTitle>

<RadzenHeader>Energy Insight Hub</RadzenHeader>
<br />
<br />
<br />
<br />

<RadzenRow>
    <RadzenColumn>
        <RadzenText Text="Hourly Consumption" TextStyle="TextStyle.DisplayH5" />
        <RadzenChart>
            <RadzenLineSeries Data=@Intervals CategoryProperty="CategoryDisplay" Title="Hourly Consumption" ValueProperty="Amount">
                <ChildContent>
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </ChildContent>
                <TooltipTemplate>
                    <b>Date:</b> @context.Time.ToString("dd/MM/yyyy")
                    <br />
                    <b>Time:</b> @context.Time.ToString("HH:mm")
                    <br />
                    <b>Interval:</b> @context.Amount kwh
                </TooltipTemplate>
            </RadzenLineSeries>
            <RadzenLegend Visible=false />
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Hourly consumption (kwh)" />
            </RadzenValueAxis>
        </RadzenChart>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenText Text="Total Consumption" TextStyle="TextStyle.DisplayH5" />
        <RadzenChart>
            <RadzenColumnSeries Data=@ChartColumns CategoryProperty="CategoryDisplay" Title="Reading" ValueProperty="Amount">
                <TooltipTemplate>
                    <b>Date:</b> @context.Date.ToString("dd/MM/yyyy")
                    <br />
                    <b>Time:</b> @context.Date.ToString("HH:mm")
                    <br />
                    <b>Reading:</b> @context.Amount kwh
                </TooltipTemplate>
            </RadzenColumnSeries>

            <RadzenLegend Visible=false />
            <RadzenColumnOptions Radius="5" Width="20" />
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Total consumption (kwh)" />
            </RadzenValueAxis>
        </RadzenChart>
    </RadzenColumn>
</RadzenRow>

<br />

<RadzenText Text="Raw Data" TextStyle="TextStyle.DisplayH5" />
<RadzenDataGrid Data="@GridRows" TItem="Row" AllowPaging PagerHorizontalAlign="HorizontalAlign.Center" Density="Density.Compact" GridLines="DataGridGridLines.Horizontal" EmptyText="No Readings to show.">
     @* <HeaderTemplate>
         <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
             @* <RadzenLabel>Start: </RadzenLabel>
             <RadzenDatePicker @bind-Value=@StartDate />
             <RadzenLabel>End: </RadzenLabel>
             <RadzenDatePicker @bind-Value=@EndDate /> 
            <RadzenButton Text="Load Data" Click="LoadReads" />
         </RadzenRow>
     </HeaderTemplate> *@
    <Columns>
        <RadzenDataGridColumn TItem="Row" Property="Date" Title="Date" Width="120px">
            <Template Context="data">
                @data.Date.ToString("yyyy-MM-dd")
            </Template>
        </RadzenDataGridColumn>
        @for (int x = 0; x < 24; ++x)
        {
            DateTime time = new();
            int index = x;
            <RadzenDataGridColumn TItem="Row" Title="@((time.AddHours(x) - time).ToString(@"hh\:mm"))">
                <Template Context="data">
                    @if(data.Readings[index] is null)
                    {
                        @("-")
                    }
                    @data.Readings[index]?.Amount
                </Template>
            </RadzenDataGridColumn>
        }
        <RadzenDataGridColumn TItem="Row" Title="Total" Property="Total" Width="80px" />
    </Columns>
</RadzenDataGrid>

<br />
<br />
<br />
<br />


@code{
    List<Row> GridRows = new();
    List<Column> ChartColumns = new();
    List<Interval> Intervals = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        LoadReads(); // first load

        hubConnection = new HubConnectionBuilder()
          .WithUrl(Navigation.ToAbsoluteUri("/dashboardhub"))
          .Build();

        hubConnection.On("UpdateDashboard", () =>
        {
            LoadReads();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    protected async void LoadReads()
    {
        GridRows = new();
        ChartColumns = new();
        Intervals = new();
        var _context = await EnergyHubContextFactory.CreateDbContextAsync();
        if (_context != null)
        {
            try
            {
                var days = _context.Readings.ToList().GroupBy(item => item.Time.Date);
                _context.Dispose();
                foreach (var day in days)
                {
                    var date = day.Key;
                    List<Reading?> readings = day.OrderBy(r => r.Time).ToList();

                    List<Column> columns = readings.Select(r => new Column
                            {
                                Amount = r.Amount,
                                Date = r.Time
                            }).ToList();
                    for (int i = 1; i < columns.Count; ++i)
                    {
                        TimeSpan timeDifference = columns[i].Date - columns[i - 1].Date;

                        if (timeDifference == TimeSpan.FromHours(1))
                        {
                            decimal intervalAmount = columns[i].Amount - columns[i - 1].Amount;
                            Intervals.Add(new Interval { Amount = intervalAmount, Time = columns[i].Date });
                        }
                    }

                    //handle missing readings
                    if(readings.Count < 24)
                    {
                        readings = PadReadings(readings);
                    }

                    GridRows.Add(
                        new()
                            {
                                Date = date,
                                Readings = readings
                            }
                    );
                    ChartColumns.AddRange(columns);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }

        //StateHasChanged();
    }

    private List<Reading?> PadReadings(List<Reading?> readings)
    {
        //early exit is there are no readings at all
        if (readings.Count == 0) return Enumerable.Repeat((Reading?)null, 24).ToList();

        List<Reading?> result = new();
        for (int hour = 0; hour <= 23; ++hour)
        {
            var existingReading = readings.FirstOrDefault(r => r?.Time.Hour == hour);
            result.Add(existingReading);
        }
        return result;
    }

    private class Row
    {
        public DateTime Date { get; set; }
        public string DisplayDate => Date.ToString("YYYY-MM-dd");
        public List<Reading?> Readings { get; set; } = new();
        public decimal? Total => Readings?.Last(r => r != null).Amount - Readings?.First(r => r != null).Amount;
    }

    private class Column
    {
        public decimal Amount { get; set; }
        public DateTime Date { get; set; }
        public string CategoryDisplay => Date.TimeOfDay == TimeSpan.Zero ? $"{Date.ToString("dd-MMM")}" : Date.ToString("HH:mm");
    }

    private class Interval
    {
        public decimal Amount { get; set; }
        public DateTime Time { get; set; }
        public string CategoryDisplay => Time.TimeOfDay == TimeSpan.Zero ? $"{Time.ToString("dd-MMM")}" : Time.ToString("HH:mm");
    }
}